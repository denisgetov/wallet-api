openapi: 3.0.0
info:
  title: Wallet API
  version: 1.0.0
  description: Wallet / iGaming wallet API (users, deposits, withdrawals, bets, transaction history)

servers:
  - url: http://localhost:3000
    description: Local dev

tags:
  - name: Auth
    description: Authentication routes
  - name: Users
    description: User and wallet operations
  - name: Transactions
    description: Transaction history

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          example: "Amount must be a positive number"

    User:
      type: object
      properties:
        id:
          type: string
          example: "64a1f8b2a1b2c3d4e5f67890"
        username:
          type: string
          example: "alice"
        balance:
          type: number
          example: 150
        kycApproved:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJI..."
        user:
          $ref: '#/components/schemas/User'

    Transaction:
      type: object
      properties:
        id:
          type: string
          example: "64b2f3..."
        userId:
          type: string
          example: "64a1f8b2a1b2c3d4e5f67890"
        type:
          type: string
          enum: [deposit, withdraw, bet]
        amount:
          type: number
        result:
          type: string
          enum: [win, lose, null]
        winnings:
          type: number
        createdAt:
          type: string
          format: date-time

paths:
  /api/auth/register:
    post:
      tags: [Auth]
      summary: Register (public)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username: { type: string }
                password: { type: string }
      responses:
        '201':
          description: Created â€” returns token + user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Username taken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/login:
    post:
      tags: [Auth]
      summary: Login (public)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username: { type: string }
                password: { type: string }
      responses:
        '200':
          description: Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users:
    get:
      tags: [Users]
      summary: Get all users (public)
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Server error
    post:
      tags: [Users]
      summary: Create a user (protected in your code - admin-style)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username]
              properties:
                username: { type: string }
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Username taken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/{userId}/deposit:
    post:
      tags: [Users]
      summary: Deposit money to user wallet
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [amount]
              properties:
                amount:
                  type: number
                  example: 100
      responses:
        '200':
          description: Deposit successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Deposit successful" }
                  balance: { type: number, example: 150 }
        '400':
          description: Invalid amount
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/{userId}/withdraw:
    post:
      tags: [Users]
      summary: Withdraw money from user wallet
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [amount]
              properties:
                amount: { type: number, example: 50 }
      responses:
        '200':
          description: Withdrawal successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Withdrawal successful" }
                  balance: { type: number, example: 100 }
        '400':
          description: Invalid amount or insufficient balance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/{userId}/bet:
    post:
      tags: [Users]
      summary: Place a bet
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [amount]
              properties:
                amount: { type: number, example: 25 }
      responses:
        '200':
          description: Bet outcome
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string, example: "win" }
                  winnings: { type: number, example: 50 }
                  balance: { type: number, example: 125 }
        '400':
          description: Invalid amount or insufficient balance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/{userId}/transactions:
    get:
      tags: [Transactions]
      summary: Get user transaction history
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Transaction list (sorted desc by createdAt)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '500':
          description: Server error
